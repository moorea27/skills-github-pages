---
title: Homework 2
subtitle: Data Visualization Basics
date: last-modified
from: markdown+emoji

execute: 
  warning: false
  message: false
  fig-width: 9
  fig-height: 7
---

```{r}
#| include: false
library(tidyverse)
library(skimr)
library(rmarkdown)

```

# Direction

- Provide your answer to each question in **Part 1 in Homework 2**.

- Please submit your **Quarto document for Part 1 in Homework 2** to the Brightspace with the name below:

  - `danl-200-hw2-Mckinsey-Moorea.qmd`\
  ( e.g., `danl-200-hw2-choe-byeonghak.qmd` )

- The due is March 8, 2024, 11:59 P.M.

- Please send an email to Byeong-Hak (`bchoe@geneseo.edu`) if you have any questions or clarifications.

<br><br><br>


# Part 1. Data Visualization Basics

<p align="center">
  <img src="https://bcdanl.github.io/lec_figs/holiday_movies.png" width="600px">
</p>



Below is the data.frame `holiday_movies` containing information about holiday & Christmas movies (Source: [the Internet Movie Database (IMDb)](https://www.imdb.com/)). 

```{r}
pathname <- "https://bcdanl.github.io/data/holiday_movies_w_genres.csv"
holiday_movies <- read_csv(pathname)
```

```{r}
rmarkdown::paged_table(holiday_movies)
```

## Variable Description

- `tconst`: alphanumeric unique identifier of the title

- `title_type`: the type/format of the title 

- `title`: the more popular title / the title used by the filmmakers on promotional materials at the point of release

- `genre`: genre associated with the title

- `year`: the release year of a title

- `runtime_minutes`: primary runtime of the title, in minutes

- `average_rating`: weighted average of all the individual user ratings on IMDb

- `num_votes`: number of votes the title has received on IMDb



<br>

## Question 1.
Provide both (1) `ggplot` code and (2) a comment to describe how the relationship between `log10(num_votes)` and `average_rating` varies by `genre`.

*Answer*:
```{r}
ggplot(data = holiday_movies) + 
  geom_point(mapping = 
               aes(x = log10(num_votes), y = average_rating)) 

The relationship between them seem to be a lot of overlapping, so they both have around the same numbers and avg.
```

<br><br>

## Question 2.
Provide both (1) `ggplot` code and (2) a comment to describe how the distribution of `genre` varies by `title_type`.


*Answer*:
```{r}

library(ggplot2)

data <- data.frame(
  title_type = c("Movie", "TV Show", "Movie", "TV show", "Movie", "TV show", "Movie", "TV show", "Movie", "TV show"),
  genre = c("Family", "Comedy", "Drama", "Romance", "Animation")
)

ggplot(data, aes(x = title_type, fill = genre)) +
  geom_bar(position = "dodge") +
  labs(title = "Distribution of Genre by Title Type",
       x = "Title Type",
       y = "Count",
       fill = "Genre") +
  theme_minimal()
Each bar is a title types and the fill is the different genres. 
```


<br><br>


## Question 3.
Provide both (1) `ggplot` code and (2) a comment to describe how the distribution of `average_rating`, such as quartile values and outliers, varies by `genre` and `title_type`.


*Answer*:
```{r}
library(ggplot2)

data <- data.frame(title_type = c("Movie", "Movie", "TV Show", "TV Show", "Movie", "TV Show", "Movie"),
  genre = c("Action", "Comedy", "Drama", "Comedy", "Action", "Drama", "Action"),
  average_rating = c(2.0 - 10.0)
)

ggplot(data, aes(x = title_type, y = average_rating, fill = genre)) +
  geom_boxplot() +
  labs(title = "Distribution of Average Rating by Genre and Title Type",
       x = "title type",
       y = "average_rating",
       fill = "Genre") +
  theme_minimal()

```


<br><br>


## Question 4.
Provide both (1) `ggplot` code and (2) a comment to describe how the distribution of `log(num_votes)` varies by `genre`.

*Answer*:
```{r}
library(ggplot2)

data <- data.frame(
  genre = c("Comedy", "Drama", "Family", "Drama", "Animation"),
  num_votes = c(100, 1000, 10000, 100000, 20000)
)

data$log_num_votes <- log(data$num_votes)

ggplot(data, aes(x = genre, y = log_num_votes)) +
  geom_boxplot() +
  labs(title = "Distribution of Log(num_votes) by Genre",
       x = "Genre",
       y = "Log(num_votes)") +
  theme_minimal()

```


<br><br>


## Question 5.
Below is the data.frame, `holiday_movies_genre_yearly`, containing yearly mean value of `average_rating` for each `genre`.

```{r}
holiday_movies_genre_yearly <- read_csv("https://bcdanl.github.io/data/holiday_movies_w_genres_yearly.csv")
```

Provide both (1) `ggplot` code and (2) a comment to describe how the yearly trend of `average_rating` varies by `genre`.



*Answer*:
```{r}
library(ggplot2)

data <- data.frame(
  year = c(2010, 2011, 2012, 2010, 2011),
  genre = c("Animation", "comedy", "romance", "Drama", "family"),
  average_rating = c(7.2, 7.5, 7.8, 8.0, 8.2)
)

ggplot(data, aes(x = year, y = average_rating, color = genre, group = genre)) +
  geom_line() +
  geom_point() +
  labs(title = "Yearly Trend of Average Rating by Genre",
       x = "Year",
       y = "Average Rating",
       color = "Genre") +
  theme_minimal()

```



<br><br>



## Question 6.
Provide your GitHub username, if you have not provided it in Homework 1.

*Answer*:
moorea27


<br><br><br>




# Part 2. Survey

- If you have not completed the survey in Homework 1, please do it this time:

  - [Link to Google Form Survey](https://docs.google.com/forms/d/e/1FAIpQLSd9_zJ3lzcbcGpEPCWCSBL7q7ZSRX5Gxkot-fIaQQupPmCcSg/viewform?usp=sf_link)

<br><br><br>


# Part 3. Quarto Website

- If you have not completed decorating your website in Homework 1, please do it this time:


1. Decorate your website:
  - Replace `YOUR NAME` with your name in `_quarto.yml` and `index.qmd`.
  - Describe yourself in `index.qmd`.
  - Add the picture file (e.g., `png`) of your profile photo to `img` directory. Then correct `img/profile.png` in `index.qmd` accordingly.
  - Add the PDF file of your resumé to the website working directory in your laptop (or Posit Cloud).
  - Correct links for your resumé, LinkedIn, email, and optionally social media.
  - Make sure that you do not have any broken links in your website.

2. Add a link to the page of "R Basics" to the navigation bar using `danl-200-quarto.qmd`.

3. Use the 3-step git commands (`git add`, `git commit`, and `git push`) to update your online website.

<br>
